import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 天干数据
const heavenlyStems = [
  { chinese: "甲", pinyin: "Jiǎ", element: "Yang Wood" },
  { chinese: "乙", pinyin: "Yǐ", element: "Yin Wood" },
  { chinese: "丙", pinyin: "Bǐng", element: "Yang Fire" },
  { chinese: "丁", pinyin: "Dīng", element: "Yin Fire" },
  { chinese: "戊", pinyin: "Wù", element: "Yang Earth" },
  { chinese: "己", pinyin: "Jǐ", element: "Yin Earth" },
  { chinese: "庚", pinyin: "Gēng", element: "Yang Metal" },
  { chinese: "辛", pinyin: "Xīn", element: "Yin Metal" },
  { chinese: "壬", pinyin: "Rén", element: "Yang Water" },
  { chinese: "癸", pinyin: "Guǐ", element: "Yin Water" }
];

// 地支数据
const earthlyBranches = [
  { chinese: "子", pinyin: "Zǐ", animal: "Rat", element: "Water" },
  { chinese: "丑", pinyin: "Chǒu", animal: "Ox", element: "Earth" },
  { chinese: "寅", pinyin: "Yín", animal: "Tiger", element: "Wood" },
  { chinese: "卯", pinyin: "Mǎo", animal: "Rabbit", element: "Wood" },
  { chinese: "辰", pinyin: "Chén", animal: "Dragon", element: "Earth" },
  { chinese: "巳", pinyin: "Sì", animal: "Snake", element: "Fire" },
  { chinese: "午", pinyin: "Wǔ", animal: "Horse", element: "Fire" },
  { chinese: "未", pinyin: "Wèi", animal: "Goat", element: "Earth" },
  { chinese: "申", pinyin: "Shēn", animal: "Monkey", element: "Metal" },
  { chinese: "酉", pinyin: "Yǒu", animal: "Rooster", element: "Metal" },
  { chinese: "戌", pinyin: "Xū", animal: "Dog", element: "Earth" },
  { chinese: "亥", pinyin: "Hài", animal: "Pig", element: "Water" }
];

// 五行关系
const getElementalRelationship = (stemElement, branchElement) => {
  const relationships = {
    "Wood": { generates: "Fire", controls: "Earth", controlledBy: "Metal", generatesBy: "Water" },
    "Fire": { generates: "Earth", controls: "Metal", controlledBy: "Water", generatesBy: "Wood" },
    "Earth": { generates: "Metal", controls: "Water", controlledBy: "Wood", generatesBy: "Fire" },
    "Metal": { generates: "Water", controls: "Wood", controlledBy: "Fire", generatesBy: "Earth" },
    "Water": { generates: "Wood", controls: "Fire", controlledBy: "Earth", generatesBy: "Metal" }
  };
  
  const stemBase = stemElement.replace(/Yang |Yin /, '');
  const branchBase = branchElement.replace(/Yang |Yin /, '');
  
  if (stemBase === branchBase) return "Same element";
  if (relationships[stemBase].generates === branchBase) return `${stemBase} generates ${branchBase}`;
  if (relationships[stemBase].controls === branchBase) return `${stemBase} controls ${branchBase}`;
  if (relationships[stemBase].controlledBy === branchBase) return `${stemBase} controlled by ${branchBase}`;
  if (relationships[stemBase].generatesBy === branchBase) return `${stemBase} generated by ${branchBase}`;
  
  return "Neutral relationship";
};

// 生成时间信息
const generateTimeInfo = (cycleNumber) => {
  const currentYear = 2025;
  const baseYear = 1984; // 甲子年开始年份
  const yearOffset = (cycleNumber - 1) % 60;
  const year = baseYear + yearOffset;
  const age = currentYear - year;
  
  return {
    yearRange: `${year}-${year + 59}`,
    currentYear: year,
    ageCalculation: age > 0 ? `${age}岁` : "未出生",
    cyclePosition: `${cycleNumber}/60`,
    nextOccurrence: year + 60
  };
};

// 生成五行分析增强
const generateEnhancedElements = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 五行强度
  let elementalStrength = "Balanced";
  if (stemBase === branchBase) {
    elementalStrength = `Strong ${stemBase}`;
  } else if (stemBase === "Wood" && branchBase === "Water") {
    elementalStrength = "Wood nourished by Water";
  } else if (stemBase === "Fire" && branchBase === "Wood") {
    elementalStrength = "Fire fueled by Wood";
  }
  
  // 有利季节
  const favorableSeasons = [];
  if (stemBase === "Wood") favorableSeasons.push("Spring", "Winter");
  if (stemBase === "Fire") favorableSeasons.push("Summer", "Spring");
  if (stemBase === "Earth") favorableSeasons.push("Late Summer", "All seasons");
  if (stemBase === "Metal") favorableSeasons.push("Autumn", "Late Summer");
  if (stemBase === "Water") favorableSeasons.push("Winter", "Autumn");
  
  // 有利方位
  const favorableDirections = [];
  if (stemBase === "Wood") favorableDirections.push("East", "North");
  if (stemBase === "Fire") favorableDirections.push("South", "East");
  if (stemBase === "Earth") favorableDirections.push("Center", "All directions");
  if (stemBase === "Metal") favorableDirections.push("West", "Center");
  if (stemBase === "Water") favorableDirections.push("North", "West");
  
  // 有利颜色
  const favorableColors = [];
  if (stemBase === "Wood") favorableColors.push("Green", "Blue", "Black");
  if (stemBase === "Fire") favorableColors.push("Red", "Orange", "Pink");
  if (stemBase === "Earth") favorableColors.push("Yellow", "Brown", "Orange");
  if (stemBase === "Metal") favorableColors.push("White", "Silver", "Gray");
  if (stemBase === "Water") favorableColors.push("Blue", "Black", "White");
  
  // 有利数字
  const favorableNumbers = [];
  if (stemBase === "Wood") favorableNumbers.push(3, 4, 8, 9);
  if (stemBase === "Fire") favorableNumbers.push(2, 7, 9);
  if (stemBase === "Earth") favorableNumbers.push(2, 5, 8);
  if (stemBase === "Metal") favorableNumbers.push(6, 7, 8);
  if (stemBase === "Water") favorableNumbers.push(1, 6, 7);
  
  return {
    elementalStrength,
    favorableSeasons: favorableSeasons.slice(0, 2),
    favorableDirections: favorableDirections.slice(0, 2),
    favorableColors: favorableColors.slice(0, 3),
    favorableNumbers: favorableNumbers.slice(0, 3)
  };
};

// 生成健康信息
const generateHealthInfo = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  const healthStrengths = [];
  const healthWeaknesses = [];
  const recommendedExercise = [];
  const dietaryAdvice = [];
  
  // 基于天干的健康信息
  if (stemBase === "Wood") {
    healthStrengths.push("Strong liver function", "Good vision", "Flexible joints");
    healthWeaknesses.push("Liver sensitivity", "Eye strain", "Tendon issues");
    recommendedExercise.push("Walking", "Swimming", "Yoga", "Tai Chi");
    dietaryAdvice.push("Eat more green vegetables", "Include sour foods", "Avoid excessive alcohol");
  } else if (stemBase === "Fire") {
    healthStrengths.push("Strong heart", "Good circulation", "Warm personality");
    healthWeaknesses.push("Heart issues", "High blood pressure", "Inflammation");
    recommendedExercise.push("Cardio exercises", "Dancing", "Martial arts");
    dietaryAdvice.push("Eat bitter foods", "Include red foods", "Avoid excessive spicy foods");
  } else if (stemBase === "Earth") {
    healthStrengths.push("Strong digestion", "Stable energy", "Good immunity");
    healthWeaknesses.push("Digestive issues", "Weight fluctuations", "Lymphatic problems");
    recommendedExercise.push("Walking", "Hiking", "Gardening", "Weight training");
    dietaryAdvice.push("Eat yellow/orange foods", "Include sweet foods", "Avoid excessive dairy");
  } else if (stemBase === "Metal") {
    healthStrengths.push("Strong lungs", "Good skin", "Clear thinking");
    healthWeaknesses.push("Respiratory issues", "Skin problems", "Constipation");
    recommendedExercise.push("Running", "Swimming", "Deep breathing exercises");
    dietaryAdvice.push("Eat white foods", "Include pungent foods", "Avoid excessive cold foods");
  } else if (stemBase === "Water") {
    healthStrengths.push("Strong kidneys", "Good hearing", "Flexible thinking");
    healthWeaknesses.push("Kidney issues", "Hearing problems", "Bone weakness");
    recommendedExercise.push("Swimming", "Cycling", "Meditation");
    dietaryAdvice.push("Eat black foods", "Include salty foods", "Avoid excessive cold drinks");
  }
  
  return {
    healthStrengths: healthStrengths.slice(0, 3),
    healthWeaknesses: healthWeaknesses.slice(0, 2),
    recommendedExercise: recommendedExercise.slice(0, 3),
    dietaryAdvice: dietaryAdvice.slice(0, 2)
  };
};

// 生成人际关系信息
const generateRelationshipInfo = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 人际关系风格
  let relationshipStyle = "Balanced";
  if (stemBase === "Wood") relationshipStyle = isYang ? "Leadership-oriented" : "Supportive";
  if (stemBase === "Fire") relationshipStyle = isYang ? "Passionate" : "Nurturing";
  if (stemBase === "Earth") relationshipStyle = isYang ? "Stable" : "Harmonious";
  if (stemBase === "Metal") relationshipStyle = isYang ? "Direct" : "Refined";
  if (stemBase === "Water") relationshipStyle = isYang ? "Intellectual" : "Intuitive";
  
  // 最佳合作伙伴
  const bestPartners = [];
  if (stemBase === "Wood") bestPartners.push("Fire", "Water");
  if (stemBase === "Fire") bestPartners.push("Earth", "Wood");
  if (stemBase === "Earth") bestPartners.push("Metal", "Fire");
  if (stemBase === "Metal") bestPartners.push("Water", "Earth");
  if (stemBase === "Water") bestPartners.push("Wood", "Metal");
  
  // 沟通方式
  const communicationStyle = [];
  if (stemBase === "Wood") communicationStyle.push("Direct", "Growth-focused");
  if (stemBase === "Fire") communicationStyle.push("Enthusiastic", "Inspirational");
  if (stemBase === "Earth") communicationStyle.push("Practical", "Patient");
  if (stemBase === "Metal") communicationStyle.push("Precise", "Authoritative");
  if (stemBase === "Water") communicationStyle.push("Analytical", "Adaptive");
  
  // 团队角色
  const teamRole = [];
  if (stemBase === "Wood") teamRole.push("Leader", "Innovator");
  if (stemBase === "Fire") teamRole.push("Motivator", "Creative");
  if (stemBase === "Earth") teamRole.push("Stabilizer", "Coordinator");
  if (stemBase === "Metal") teamRole.push("Organizer", "Quality Controller");
  if (stemBase === "Water") teamRole.push("Strategist", "Problem Solver");
  
  return {
    relationshipStyle,
    bestPartners: bestPartners.slice(0, 2),
    communicationStyle: communicationStyle.slice(0, 2),
    teamRole: teamRole.slice(0, 2)
  };
};

// 生成情感与婚姻信息
const generateLoveInfo = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 情感风格
  let loveStyle = "Balanced";
  if (stemBase === "Wood") loveStyle = isYang ? "Ambitious lover" : "Gentle companion";
  if (stemBase === "Fire") loveStyle = isYang ? "Passionate partner" : "Warm nurturer";
  if (stemBase === "Earth") loveStyle = isYang ? "Stable provider" : "Loyal supporter";
  if (stemBase === "Metal") loveStyle = isYang ? "Strong protector" : "Refined partner";
  if (stemBase === "Water") loveStyle = isYang ? "Intellectual lover" : "Intuitive soulmate";
  
  // 最佳结婚年龄
  const marriageAge = [];
  if (stemBase === "Wood") marriageAge.push(25, 32, 40);
  if (stemBase === "Fire") marriageAge.push(23, 30, 38);
  if (stemBase === "Earth") marriageAge.push(27, 35, 42);
  if (stemBase === "Metal") marriageAge.push(26, 33, 41);
  if (stemBase === "Water") marriageAge.push(24, 31, 39);
  
  // 理想伴侣特质
  const idealPartnerTraits = [];
  if (stemBase === "Wood") idealPartnerTraits.push("Supportive", "Growth-minded");
  if (stemBase === "Fire") idealPartnerTraits.push("Understanding", "Passionate");
  if (stemBase === "Earth") idealPartnerTraits.push("Reliable", "Patient");
  if (stemBase === "Metal") idealPartnerTraits.push("Respectful", "Organized");
  if (stemBase === "Water") idealPartnerTraits.push("Intelligent", "Adaptable");
  
  // 婚姻挑战
  const marriageChallenges = [];
  if (stemBase === "Wood" && isYang) marriageChallenges.push("Dominance", "Impatience");
  if (stemBase === "Wood" && !isYang) marriageChallenges.push("Indecisiveness", "Over-sensitivity");
  if (stemBase === "Fire" && isYang) marriageChallenges.push("Jealousy", "Mood swings");
  if (stemBase === "Fire" && !isYang) marriageChallenges.push("Emotional dependency", "Self-sacrifice");
  if (stemBase === "Earth" && isYang) marriageChallenges.push("Stubbornness", "Rigidity");
  if (stemBase === "Earth" && !isYang) marriageChallenges.push("Over-caution", "Indecisiveness");
  if (stemBase === "Metal" && isYang) marriageChallenges.push("Perfectionism", "Coldness");
  if (stemBase === "Metal" && !isYang) marriageChallenges.push("Over-refinement", "Detachment");
  if (stemBase === "Water" && isYang) marriageChallenges.push("Restlessness", "Unpredictability");
  if (stemBase === "Water" && !isYang) marriageChallenges.push("Isolation", "Overthinking");
  
  return {
    loveStyle,
    marriageAge: marriageAge.slice(0, 2),
    idealPartnerTraits: idealPartnerTraits.slice(0, 2),
    marriageChallenges: marriageChallenges.slice(0, 2)
  };
};

// 生成学习与教育信息
const generateEducationInfo = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 学习风格
  let learningStyle = "Balanced";
  if (stemBase === "Wood") learningStyle = isYang ? "Active learner" : "Reflective learner";
  if (stemBase === "Fire") learningStyle = isYang ? "Enthusiastic learner" : "Creative learner";
  if (stemBase === "Earth") learningStyle = isYang ? "Practical learner" : "Patient learner";
  if (stemBase === "Metal") learningStyle = isYang ? "Systematic learner" : "Precise learner";
  if (stemBase === "Water") learningStyle = isYang ? "Analytical learner" : "Intuitive learner";
  
  // 最佳学科
  const bestSubjects = [];
  if (stemBase === "Wood") bestSubjects.push("Business", "Leadership", "Environmental Science");
  if (stemBase === "Fire") bestSubjects.push("Marketing", "Arts", "Psychology");
  if (stemBase === "Earth") bestSubjects.push("Agriculture", "Construction", "Management");
  if (stemBase === "Metal") bestSubjects.push("Engineering", "Law", "Mathematics");
  if (stemBase === "Water") bestSubjects.push("Technology", "Research", "Philosophy");
  
  // 学习环境偏好
  const learningEnvironment = [];
  if (stemBase === "Wood") learningEnvironment.push("Outdoor activities", "Group projects");
  if (stemBase === "Fire") learningEnvironment.push("Interactive sessions", "Creative spaces");
  if (stemBase === "Earth") learningEnvironment.push("Structured classes", "Practical workshops");
  if (stemBase === "Metal") learningEnvironment.push("Quiet study areas", "Systematic approach");
  if (stemBase === "Water") learningEnvironment.push("Flexible schedules", "Research labs");
  
  // 最佳学习时间
  const bestLearningTime = [];
  if (stemBase === "Wood") bestLearningTime.push("Morning", "Spring");
  if (stemBase === "Fire") bestLearningTime.push("Afternoon", "Summer");
  if (stemBase === "Earth") bestLearningTime.push("Late morning", "Late summer");
  if (stemBase === "Metal") bestLearningTime.push("Evening", "Autumn");
  if (stemBase === "Water") bestLearningTime.push("Night", "Winter");
  
  return {
    learningStyle,
    bestSubjects: bestSubjects.slice(0, 3),
    learningEnvironment: learningEnvironment.slice(0, 2),
    bestLearningTime: bestLearningTime.slice(0, 2)
  };
};

// 生成财富分析信息
const generateWealthInfo = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 财富潜力
  let wealthPotential = "Moderate";
  if (stemBase === "Wood") wealthPotential = isYang ? "High growth potential" : "Steady accumulation";
  if (stemBase === "Fire") wealthPotential = isYang ? "High risk-reward" : "Creative income";
  if (stemBase === "Earth") wealthPotential = isYang ? "Stable wealth" : "Conservative growth";
  if (stemBase === "Metal") wealthPotential = isYang ? "High value creation" : "Refined wealth";
  if (stemBase === "Water") wealthPotential = isYang ? "Innovative wealth" : "Intellectual assets";
  
  // 最佳投资领域
  const investmentAreas = [];
  if (stemBase === "Wood") investmentAreas.push("Real estate", "Growth stocks", "Green energy");
  if (stemBase === "Fire") investmentAreas.push("Technology", "Entertainment", "Innovation");
  if (stemBase === "Earth") investmentAreas.push("Agriculture", "Infrastructure", "Government bonds");
  if (stemBase === "Metal") investmentAreas.push("Precious metals", "Manufacturing", "Financial services");
  if (stemBase === "Water") investmentAreas.push("Technology", "Research", "International markets");
  
  // 财富时机
  const wealthTiming = [];
  if (stemBase === "Wood") wealthTiming.push("25-35", "40-50");
  if (stemBase === "Fire") wealthTiming.push("23-33", "38-48");
  if (stemBase === "Earth") wealthTiming.push("27-37", "42-52");
  if (stemBase === "Metal") wealthTiming.push("26-36", "41-51");
  if (stemBase === "Water") wealthTiming.push("24-34", "39-49");
  
  // 理财建议
  const financialAdvice = [];
  if (stemBase === "Wood") financialAdvice.push("Long-term investments", "Diversification");
  if (stemBase === "Fire") financialAdvice.push("High-growth opportunities", "Risk management");
  if (stemBase === "Earth") financialAdvice.push("Stable investments", "Conservative approach");
  if (stemBase === "Metal") financialAdvice.push("Quality investments", "Systematic approach");
  if (stemBase === "Water") financialAdvice.push("Innovative investments", "Research-based decisions");
  
  return {
    wealthPotential,
    investmentAreas: investmentAreas.slice(0, 3),
    wealthTiming: wealthTiming.slice(0, 2),
    financialAdvice: financialAdvice.slice(0, 2)
  };
};

// 生成风水与居住信息
const generateFengShuiInfo = (stem, branch) => {
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 最佳居住方位
  const bestLivingDirections = [];
  if (stemBase === "Wood") bestLivingDirections.push("East", "Southeast");
  if (stemBase === "Fire") bestLivingDirections.push("South", "Northeast");
  if (stemBase === "Earth") bestLivingDirections.push("Center", "Southwest");
  if (stemBase === "Metal") bestLivingDirections.push("West", "Northwest");
  if (stemBase === "Water") bestLivingDirections.push("North", "Southeast");
  
  // 居住环境偏好
  const livingEnvironment = [];
  if (stemBase === "Wood") livingEnvironment.push("Near trees", "Elevated areas");
  if (stemBase === "Fire") livingEnvironment.push("Sunny locations", "High energy areas");
  if (stemBase === "Earth") livingEnvironment.push("Flat land", "Stable ground");
  if (stemBase === "Metal") livingEnvironment.push("Mountain views", "Clean areas");
  if (stemBase === "Water") livingEnvironment.push("Near water", "Quiet areas");
  
  // 室内装饰建议
  const decorationAdvice = [];
  if (stemBase === "Wood") decorationAdvice.push("Green plants", "Wooden furniture");
  if (stemBase === "Fire") decorationAdvice.push("Red accents", "Bright lighting");
  if (stemBase === "Earth") decorationAdvice.push("Yellow tones", "Ceramic items");
  if (stemBase === "Metal") decorationAdvice.push("White/white", "Metal accents");
  if (stemBase === "Water") decorationAdvice.push("Blue tones", "Curved shapes");
  
  // 避免的居住环境
  const avoidEnvironments = [];
  if (stemBase === "Wood") avoidEnvironments.push("Metal-heavy areas", "Dry environments");
  if (stemBase === "Fire") avoidEnvironments.push("Water-heavy areas", "Dark spaces");
  if (stemBase === "Earth") avoidEnvironments.push("Wood-heavy areas", "Unstable ground");
  if (stemBase === "Metal") avoidEnvironments.push("Fire-heavy areas", "Chaotic spaces");
  if (stemBase === "Water") avoidEnvironments.push("Earth-heavy areas", "Confined spaces");
  
  return {
    bestLivingDirections: bestLivingDirections.slice(0, 2),
    livingEnvironment: livingEnvironment.slice(0, 2),
    decorationAdvice: decorationAdvice.slice(0, 2),
    avoidEnvironments: avoidEnvironments.slice(0, 2)
  };
};

// 生成特征和性格
const generateCharacteristics = (stem, branch) => {
  const characteristics = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  
  // 基于天干特征
  if (stemBase === "Wood") characteristics.push("Growth", "Leadership", "Vision");
  if (stemBase === "Fire") characteristics.push("Passion", "Energy", "Creativity");
  if (stemBase === "Earth") characteristics.push("Stability", "Reliability", "Practicality");
  if (stemBase === "Metal") characteristics.push("Strength", "Precision", "Authority");
  if (stemBase === "Water") characteristics.push("Intelligence", "Adaptability", "Wisdom");
  
  // 基于地支特征
  if (branchBase === "Wood") characteristics.push("Expansion", "Innovation");
  if (branchBase === "Fire") characteristics.push("Transformation", "Illumination");
  if (branchBase === "Earth") characteristics.push("Foundation", "Support");
  if (branchBase === "Metal") characteristics.push("Refinement", "Structure");
  if (branchBase === "Water") characteristics.push("Flow", "Intuition");
  
  return characteristics.slice(0, 4);
};

// 生成性格特征
const generatePersonalityTraits = (stem, branch) => {
  const traits = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 基于天干和阴阳
  if (stemBase === "Wood") {
    traits.push(isYang ? "Ambitious" : "Flexible", "Determined", "Growth-oriented");
  }
  if (stemBase === "Fire") {
    traits.push(isYang ? "Dynamic" : "Creative", "Enthusiastic", "Charismatic");
  }
  if (stemBase === "Earth") {
    traits.push(isYang ? "Strong" : "Patient", "Reliable", "Practical");
  }
  if (stemBase === "Metal") {
    traits.push(isYang ? "Direct" : "Refined", "Precise", "Authoritative");
  }
  if (stemBase === "Water") {
    traits.push(isYang ? "Intelligent" : "Intuitive", "Adaptable", "Wise");
  }
  
  // 基于地支动物特征
  const animalTraits = {
    "Rat": "Resourceful", "Ox": "Hardworking", "Tiger": "Brave", "Rabbit": "Gentle",
    "Dragon": "Powerful", "Snake": "Wise", "Horse": "Energetic", "Goat": "Artistic",
    "Monkey": "Intelligent", "Rooster": "Confident", "Dog": "Loyal", "Pig": "Compassionate"
  };
  
  traits.push(animalTraits[branch.animal]);
  
  return traits.slice(0, 4);
};

// 生成职业建议
const generateCareerAdvice = (stem, branch) => {
  const careers = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  
  if (stemBase === "Wood") careers.push("Leadership", "Management", "Growth industries");
  if (stemBase === "Fire") careers.push("Sales", "Marketing", "Entertainment");
  if (stemBase === "Earth") careers.push("Construction", "Agriculture", "Government");
  if (stemBase === "Metal") careers.push("Engineering", "Law", "Military");
  if (stemBase === "Water") careers.push("Technology", "Research", "Education");
  
  // 基于地支
  if (branch.animal === "Rat") careers.push("Innovation");
  if (branch.animal === "Ox") careers.push("Agriculture");
  if (branch.animal === "Tiger") careers.push("Sports");
  if (branch.animal === "Rabbit") careers.push("Arts");
  if (branch.animal === "Dragon") careers.push("Government");
  if (branch.animal === "Snake") careers.push("Research");
  if (branch.animal === "Horse") careers.push("Transportation");
  if (branch.animal === "Goat") careers.push("Design");
  if (branch.animal === "Monkey") careers.push("Technology");
  if (branch.animal === "Rooster") careers.push("Communication");
  if (branch.animal === "Dog") careers.push("Security");
  if (branch.animal === "Pig") careers.push("Healthcare");
  
  return careers.slice(0, 4);
};

// 生成幸运元素
const generateLuckyElements = (stem, branch) => {
  const lucky = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  
  // 相生元素
  if (stemBase === "Wood") lucky.push("Water");
  if (stemBase === "Fire") lucky.push("Wood");
  if (stemBase === "Earth") lucky.push("Fire");
  if (stemBase === "Metal") lucky.push("Earth");
  if (stemBase === "Water") lucky.push("Metal");
  
  // 相克元素
  if (stemBase === "Wood") lucky.push("Metal");
  if (stemBase === "Fire") lucky.push("Water");
  if (stemBase === "Earth") lucky.push("Wood");
  if (stemBase === "Metal") lucky.push("Fire");
  if (stemBase === "Water") lucky.push("Earth");
  
  return lucky.slice(0, 2);
};

// 生成挑战
const generateChallenges = (stem, branch) => {
  const challenges = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  if (stemBase === "Wood" && isYang) challenges.push("Stubbornness", "Over-confidence");
  if (stemBase === "Wood" && !isYang) challenges.push("Indecisiveness", "Over-sensitivity");
  if (stemBase === "Fire" && isYang) challenges.push("Impulsiveness", "Burnout");
  if (stemBase === "Fire" && !isYang) challenges.push("Emotional volatility", "Self-doubt");
  if (stemBase === "Earth" && isYang) challenges.push("Rigidity", "Stubbornness");
  if (stemBase === "Earth" && !isYang) challenges.push("Indecisiveness", "Over-caution");
  if (stemBase === "Metal" && isYang) challenges.push("Aggressiveness", "Impatience");
  if (stemBase === "Metal" && !isYang) challenges.push("Perfectionism", "Over-refinement");
  if (stemBase === "Water" && isYang) challenges.push("Restlessness", "Scattered energy");
  if (stemBase === "Water" && !isYang) challenges.push("Isolation", "Overthinking");
  
  return challenges.slice(0, 2);
};

// 生成60甲子数据 - 全面增强版
const generateComprehensiveSixtyJiazi = () => {
  const data = [];
  let cycleNumber = 1;
  
  // 正确的60甲子生成逻辑
  for (let i = 0; i < 10; i++) { // 10个天干
    for (let j = 0; j < 6; j++) { // 每个天干对应6个地支
      const stemIndex = i;
      const branchIndex = (i * 2 + j) % 12;
      
      const stem = heavenlyStems[stemIndex];
      const branch = earthlyBranches[branchIndex];
      
      const combination = {
        cycleNumber,
        heavenlyStem: {
          chinese: stem.chinese,
          pinyin: stem.pinyin,
          element: stem.element
        },
        earthlyBranch: {
          chinese: branch.chinese,
          pinyin: branch.pinyin,
          animal: branch.animal,
          element: branch.element
        },
        combination: stem.chinese + branch.chinese,
        elementalRelationship: getElementalRelationship(stem.element, branch.element),
        
        // 基础信息
        timeInfo: generateTimeInfo(cycleNumber),
        enhancedElements: generateEnhancedElements(stem, branch),
        healthInfo: generateHealthInfo(stem, branch),
        characteristics: generateCharacteristics(stem, branch),
        personalityTraits: generatePersonalityTraits(stem, branch),
        careerAdvice: generateCareerAdvice(stem, branch),
        luckyElements: generateLuckyElements(stem, branch),
        challenges: generateChallenges(stem, branch),
        
        // 新增的人际关系信息
        relationshipInfo: generateRelationshipInfo(stem, branch),
        
        // 新增的情感与婚姻信息
        loveInfo: generateLoveInfo(stem, branch),
        
        // 新增的学习与教育信息
        educationInfo: generateEducationInfo(stem, branch),
        
        // 新增的财富分析信息
        wealthInfo: generateWealthInfo(stem, branch),
        
        // 新增的风水与居住信息
        fengShuiInfo: generateFengShuiInfo(stem, branch)
      };
      
      data.push(combination);
      cycleNumber++;
    }
  }
  
  return data;
};

// 创建完整的数据结构
const createComprehensiveDataset = () => {
  const dataset = {
    metadata: {
      name: "Comprehensive Sixty Jiazi Dataset",
      description: "Complete comprehensive data for the 60 Jiazi (甲子) combinations with all aspects of life analysis including relationships, love, education, wealth, and feng shui",
      version: "3.0.0",
      lastUpdated: new Date().toISOString().split('T')[0],
      license: "CC BY-NC-SA 4.0",
      author: "FatePath BaZi Master",
      totalRecords: 60,
      format: "JSON",
      language: "en",
      enhancements: [
        "Time information and age calculations",
        "Enhanced elemental analysis",
        "Health information and advice",
        "Favorable seasons, directions, colors, and numbers",
        "Relationship and interpersonal dynamics",
        "Love, marriage, and emotional guidance",
        "Learning styles and educational preferences",
        "Wealth potential and investment advice",
        "Feng shui and living environment guidance"
      ]
    },
    schema: {
      fields: [
        {
          name: "cycleNumber",
          type: "integer",
          description: "Position in the 60-year cycle (1-60)",
          example: 1
        },
        {
          name: "heavenlyStem",
          type: "object",
          description: "Heavenly Stem information",
          example: {
            chinese: "甲",
            pinyin: "Jiǎ",
            element: "Yang Wood"
          }
        },
        {
          name: "earthlyBranch",
          type: "object",
          description: "Earthly Branch information",
          example: {
            chinese: "子",
            pinyin: "Zǐ",
            animal: "Rat",
            element: "Water"
          }
        },
        {
          name: "combination",
          type: "string",
          description: "Combined Chinese characters",
          example: "甲子"
        },
        {
          name: "elementalRelationship",
          type: "string",
          description: "Relationship between stem and branch elements",
          example: "Wood generated by Water"
        },
        {
          name: "timeInfo",
          type: "object",
          description: "Time-related information including year range and age",
          example: {
            yearRange: "1984-2043",
            currentYear: 1984,
            ageCalculation: "41岁"
          }
        },
        {
          name: "enhancedElements",
          type: "object",
          description: "Enhanced elemental analysis including favorable seasons, directions, colors, and numbers",
          example: {
            elementalStrength: "Strong Wood",
            favorableSeasons: ["Spring", "Winter"],
            favorableDirections: ["East", "North"]
          }
        },
        {
          name: "healthInfo",
          type: "object",
          description: "Health-related information including strengths, weaknesses, and advice",
          example: {
            healthStrengths: ["Strong liver function", "Good vision"],
            healthWeaknesses: ["Liver sensitivity", "Eye strain"]
          }
        },
        {
          name: "relationshipInfo",
          type: "object",
          description: "Interpersonal relationship information including style, partners, and communication",
          example: {
            relationshipStyle: "Leadership-oriented",
            bestPartners: ["Fire", "Water"],
            communicationStyle: ["Direct", "Growth-focused"]
          }
        },
        {
          name: "loveInfo",
          type: "object",
          description: "Love and marriage information including style, timing, and challenges",
          example: {
            loveStyle: "Ambitious lover",
            marriageAge: [25, 32],
            idealPartnerTraits: ["Supportive", "Growth-minded"]
          }
        },
        {
          name: "educationInfo",
          type: "object",
          description: "Learning and education preferences including style, subjects, and environment",
          example: {
            learningStyle: "Active learner",
            bestSubjects: ["Business", "Leadership", "Environmental Science"],
            learningEnvironment: ["Outdoor activities", "Group projects"]
          }
        },
        {
          name: "wealthInfo",
          type: "object",
          description: "Wealth potential and financial advice including investment areas and timing",
          example: {
            wealthPotential: "High growth potential",
            investmentAreas: ["Real estate", "Growth stocks", "Green energy"],
            wealthTiming: ["25-35", "40-50"]
          }
        },
        {
          name: "fengShuiInfo",
          type: "object",
          description: "Feng shui and living environment guidance including directions and decoration",
          example: {
            bestLivingDirections: ["East", "Southeast"],
            livingEnvironment: ["Near trees", "Elevated areas"],
            decorationAdvice: ["Green plants", "Wooden furniture"]
          }
        },
        {
          name: "characteristics",
          type: "array",
          description: "Key characteristics of this combination",
          example: ["Growth", "Leadership", "Vision"]
        },
        {
          name: "personalityTraits",
          type: "array",
          description: "Personality traits associated with this combination",
          example: ["Ambitious", "Determined", "Growth-oriented"]
        },
        {
          name: "careerAdvice",
          type: "array",
          description: "Career recommendations for this combination",
          example: ["Leadership", "Management", "Growth industries"]
        },
        {
          name: "luckyElements",
          type: "array",
          description: "Lucky elements for this combination",
          example: ["Water", "Metal"]
        },
        {
          name: "challenges",
          type: "array",
          description: "Potential challenges to overcome",
          example: ["Stubbornness", "Over-confidence"]
        }
      ]
    },
    data: generateComprehensiveSixtyJiazi()
  };
  
  return dataset;
};

// 生成并保存数据
const dataset = createComprehensiveDataset();
const outputPath = path.join(__dirname, '..', 'public', 'datasets', 'sixty-jiazi-comprehensive.json');

fs.writeFileSync(outputPath, JSON.stringify(dataset, null, 2), 'utf8');
console.log(`全面增强版60甲子数据已生成并保存到: ${outputPath}`);
console.log(`总共生成了 ${dataset.data.length} 个甲子组合`);

// 验证数据
console.log('\n=== 数据验证 ===');
const stemCounts = {};
const branchCounts = {};

dataset.data.forEach(item => {
  const stem = item.heavenlyStem.chinese;
  const branch = item.earthlyBranch.chinese;
  stemCounts[stem] = (stemCounts[stem] || 0) + 1;
  branchCounts[branch] = (branchCounts[branch] || 0) + 1;
});

console.log('天干分布:');
Object.entries(stemCounts).forEach(([stem, count]) => {
  console.log(`  ${stem}: ${count}个`);
});

console.log('\n地支分布:');
Object.entries(branchCounts).forEach(([branch, count]) => {
  console.log(`  ${branch}: ${count}个`);
});

console.log('\n前3个组合示例:');
dataset.data.slice(0, 3).forEach(item => {
  console.log(`\n${item.cycleNumber}. ${item.combination}`);
  console.log(`  年份范围: ${item.timeInfo.yearRange}`);
  console.log(`  当前年龄: ${item.timeInfo.ageCalculation}`);
  console.log(`  五行强度: ${item.enhancedElements.elementalStrength}`);
  console.log(`  人际关系风格: ${item.relationshipInfo.relationshipStyle}`);
  console.log(`  情感风格: ${item.loveInfo.loveStyle}`);
  console.log(`  学习风格: ${item.educationInfo.learningStyle}`);
  console.log(`  财富潜力: ${item.wealthInfo.wealthPotential}`);
  console.log(`  最佳居住方位: ${item.fengShuiInfo.bestLivingDirections.join(', ')}`);
});











