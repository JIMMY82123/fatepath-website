import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 天干数据
const heavenlyStems = [
  { chinese: "甲", pinyin: "Jiǎ", element: "Yang Wood" },
  { chinese: "乙", pinyin: "Yǐ", element: "Yin Wood" },
  { chinese: "丙", pinyin: "Bǐng", element: "Yang Fire" },
  { chinese: "丁", pinyin: "Dīng", element: "Yin Fire" },
  { chinese: "戊", pinyin: "Wù", element: "Yang Earth" },
  { chinese: "己", pinyin: "Jǐ", element: "Yin Earth" },
  { chinese: "庚", pinyin: "Gēng", element: "Yang Metal" },
  { chinese: "辛", pinyin: "Xīn", element: "Yin Metal" },
  { chinese: "壬", pinyin: "Rén", element: "Yang Water" },
  { chinese: "癸", pinyin: "Guǐ", element: "Yin Water" }
];

// 地支数据
const earthlyBranches = [
  { chinese: "子", pinyin: "Zǐ", animal: "Rat", element: "Water" },
  { chinese: "丑", pinyin: "Chǒu", animal: "Ox", element: "Earth" },
  { chinese: "寅", pinyin: "Yín", animal: "Tiger", element: "Wood" },
  { chinese: "卯", pinyin: "Mǎo", animal: "Rabbit", element: "Wood" },
  { chinese: "辰", pinyin: "Chén", animal: "Dragon", element: "Earth" },
  { chinese: "巳", pinyin: "Sì", animal: "Snake", element: "Fire" },
  { chinese: "午", pinyin: "Wǔ", animal: "Horse", element: "Fire" },
  { chinese: "未", pinyin: "Wèi", animal: "Goat", element: "Earth" },
  { chinese: "申", pinyin: "Shēn", animal: "Monkey", element: "Metal" },
  { chinese: "酉", pinyin: "Yǒu", animal: "Rooster", element: "Metal" },
  { chinese: "戌", pinyin: "Xū", animal: "Dog", element: "Earth" },
  { chinese: "亥", pinyin: "Hài", animal: "Pig", element: "Water" }
];

// 五行关系
const getElementalRelationship = (stemElement, branchElement) => {
  const relationships = {
    "Wood": { generates: "Fire", controls: "Earth", controlledBy: "Metal", generatesBy: "Water" },
    "Fire": { generates: "Earth", controls: "Metal", controlledBy: "Water", generatesBy: "Wood" },
    "Earth": { generates: "Metal", controls: "Water", controlledBy: "Wood", generatesBy: "Fire" },
    "Metal": { generates: "Water", controls: "Wood", controlledBy: "Fire", generatesBy: "Earth" },
    "Water": { generates: "Wood", controls: "Fire", controlledBy: "Earth", generatesBy: "Metal" }
  };
  
  const stemBase = stemElement.replace(/Yang |Yin /, '');
  const branchBase = branchElement.replace(/Yang |Yin /, '');
  
  if (stemBase === branchBase) return "Same element";
  if (relationships[stemBase].generates === branchBase) return `${stemBase} generates ${branchBase}`;
  if (relationships[stemBase].controls === branchBase) return `${stemBase} controls ${branchBase}`;
  if (relationships[stemBase].controlledBy === branchBase) return `${stemBase} controlled by ${branchBase}`;
  if (relationships[stemBase].generatesBy === branchBase) return `${stemBase} generated by ${branchBase}`;
  
  return "Neutral relationship";
};

// 生成特征和性格
const generateCharacteristics = (stem, branch) => {
  const characteristics = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  
  // 基于天干特征
  if (stemBase === "Wood") characteristics.push("Growth", "Leadership", "Vision");
  if (stemBase === "Fire") characteristics.push("Passion", "Energy", "Creativity");
  if (stemBase === "Earth") characteristics.push("Stability", "Reliability", "Practicality");
  if (stemBase === "Metal") characteristics.push("Strength", "Precision", "Authority");
  if (stemBase === "Water") characteristics.push("Intelligence", "Adaptability", "Wisdom");
  
  // 基于地支特征
  if (branchBase === "Wood") characteristics.push("Expansion", "Innovation");
  if (branchBase === "Fire") characteristics.push("Transformation", "Illumination");
  if (branchBase === "Earth") characteristics.push("Foundation", "Support");
  if (branchBase === "Metal") characteristics.push("Refinement", "Structure");
  if (branchBase === "Water") characteristics.push("Flow", "Intuition");
  
  return characteristics.slice(0, 4);
};

// 生成性格特征
const generatePersonalityTraits = (stem, branch) => {
  const traits = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  // 基于天干和阴阳
  if (stemBase === "Wood") {
    traits.push(isYang ? "Ambitious" : "Flexible", "Determined", "Growth-oriented");
  }
  if (stemBase === "Fire") {
    traits.push(isYang ? "Dynamic" : "Creative", "Enthusiastic", "Charismatic");
  }
  if (stemBase === "Earth") {
    traits.push(isYang ? "Strong" : "Patient", "Reliable", "Practical");
  }
  if (stemBase === "Metal") {
    traits.push(isYang ? "Direct" : "Refined", "Precise", "Authoritative");
  }
  if (stemBase === "Water") {
    traits.push(isYang ? "Intelligent" : "Intuitive", "Adaptable", "Wise");
  }
  
  // 基于地支动物特征
  const animalTraits = {
    "Rat": "Resourceful", "Ox": "Hardworking", "Tiger": "Brave", "Rabbit": "Gentle",
    "Dragon": "Powerful", "Snake": "Wise", "Horse": "Energetic", "Goat": "Artistic",
    "Monkey": "Intelligent", "Rooster": "Confident", "Dog": "Loyal", "Pig": "Compassionate"
  };
  
  traits.push(animalTraits[branch.animal]);
  
  return traits.slice(0, 4);
};

// 生成职业建议
const generateCareerAdvice = (stem, branch) => {
  const careers = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  
  if (stemBase === "Wood") careers.push("Leadership", "Management", "Growth industries");
  if (stemBase === "Fire") careers.push("Sales", "Marketing", "Entertainment");
  if (stemBase === "Earth") careers.push("Construction", "Agriculture", "Government");
  if (stemBase === "Metal") careers.push("Engineering", "Law", "Military");
  if (stemBase === "Water") careers.push("Technology", "Research", "Education");
  
  // 基于地支
  if (branch.animal === "Rat") careers.push("Innovation");
  if (branch.animal === "Ox") careers.push("Agriculture");
  if (branch.animal === "Tiger") careers.push("Sports");
  if (branch.animal === "Rabbit") careers.push("Arts");
  if (branch.animal === "Dragon") careers.push("Government");
  if (branch.animal === "Snake") careers.push("Research");
  if (branch.animal === "Horse") careers.push("Transportation");
  if (branch.animal === "Goat") careers.push("Design");
  if (branch.animal === "Monkey") careers.push("Technology");
  if (branch.animal === "Rooster") careers.push("Communication");
  if (branch.animal === "Dog") careers.push("Security");
  if (branch.animal === "Pig") careers.push("Healthcare");
  
  return careers.slice(0, 4);
};

// 生成幸运元素
const generateLuckyElements = (stem, branch) => {
  const lucky = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const branchBase = branch.element.replace(/Yang |Yin /, '');
  
  // 相生元素
  if (stemBase === "Wood") lucky.push("Water");
  if (stemBase === "Fire") lucky.push("Wood");
  if (stemBase === "Earth") lucky.push("Fire");
  if (stemBase === "Metal") lucky.push("Earth");
  if (stemBase === "Water") lucky.push("Metal");
  
  // 相克元素
  if (stemBase === "Wood") lucky.push("Metal");
  if (stemBase === "Fire") lucky.push("Water");
  if (stemBase === "Earth") lucky.push("Wood");
  if (stemBase === "Metal") lucky.push("Fire");
  if (stemBase === "Water") lucky.push("Earth");
  
  return lucky.slice(0, 2);
};

// 生成挑战
const generateChallenges = (stem, branch) => {
  const challenges = [];
  const stemBase = stem.element.replace(/Yang |Yin /, '');
  const isYang = stem.element.startsWith("Yang");
  
  if (stemBase === "Wood" && isYang) challenges.push("Stubbornness", "Over-confidence");
  if (stemBase === "Wood" && !isYang) challenges.push("Indecisiveness", "Over-sensitivity");
  if (stemBase === "Fire" && isYang) challenges.push("Impulsiveness", "Burnout");
  if (stemBase === "Fire" && !isYang) challenges.push("Emotional volatility", "Self-doubt");
  if (stemBase === "Earth" && isYang) challenges.push("Rigidity", "Stubbornness");
  if (stemBase === "Earth" && !isYang) challenges.push("Indecisiveness", "Over-caution");
  if (stemBase === "Metal" && isYang) challenges.push("Aggressiveness", "Impatience");
  if (stemBase === "Metal" && !isYang) challenges.push("Perfectionism", "Over-refinement");
  if (stemBase === "Water" && isYang) challenges.push("Restlessness", "Scattered energy");
  if (stemBase === "Water" && !isYang) challenges.push("Isolation", "Overthinking");
  
  return challenges.slice(0, 2);
};

// 生成60甲子数据
const generateSixtyJiazi = () => {
  const data = [];
  let cycleNumber = 1;
  
  // 正确的60甲子生成逻辑
  // 天干按顺序循环：甲、乙、丙、丁、戊、己、庚、辛、壬、癸
  // 地支按顺序循环：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥
  // 每个天干对应6个地支，形成完整的60年周期
  
  for (let i = 0; i < 10; i++) { // 10个天干
    for (let j = 0; j < 6; j++) { // 每个天干对应6个地支
      const stemIndex = i;
      const branchIndex = (i * 2 + j) % 12;
      
      const stem = heavenlyStems[stemIndex];
      const branch = earthlyBranches[branchIndex];
      
      const combination = {
        cycleNumber,
        heavenlyStem: {
          chinese: stem.chinese,
          pinyin: stem.pinyin,
          element: stem.element
        },
        earthlyBranch: {
          chinese: branch.chinese,
          pinyin: branch.pinyin,
          animal: branch.animal,
          element: branch.element
        },
        combination: stem.chinese + branch.chinese,
        elementalRelationship: getElementalRelationship(stem.element, branch.element),
        characteristics: generateCharacteristics(stem, branch),
        personalityTraits: generatePersonalityTraits(stem, branch),
        careerAdvice: generateCareerAdvice(stem, branch),
        luckyElements: generateLuckyElements(stem, branch),
        challenges: generateChallenges(stem, branch)
      };
      
      data.push(combination);
      cycleNumber++;
    }
  }
  
  return data;
};

// 创建完整的数据结构
const createDataset = () => {
  const dataset = {
    metadata: {
      name: "Sixty Jiazi Dataset",
      description: "Complete data for the 60 Jiazi (甲子) combinations - all possible combinations of 10 Heavenly Stems and 12 Earthly Branches used in BaZi analysis",
      version: "1.0.0",
      lastUpdated: new Date().toISOString().split('T')[0],
      license: "CC BY-NC-SA 4.0",
      author: "FatePath BaZi Master",
      totalRecords: 60,
      format: "JSON",
      language: "en"
    },
    schema: {
      fields: [
        {
          name: "cycleNumber",
          type: "integer",
          description: "Position in the 60-year cycle (1-60)",
          example: 1
        },
        {
          name: "heavenlyStem",
          type: "object",
          description: "Heavenly Stem information",
          example: {
            chinese: "甲",
            pinyin: "Jiǎ",
            element: "Yang Wood"
          }
        },
        {
          name: "earthlyBranch",
          type: "object",
          description: "Earthly Branch information",
          example: {
            chinese: "子",
            pinyin: "Zǐ",
            animal: "Rat",
            element: "Water"
          }
        },
        {
          name: "combination",
          type: "string",
          description: "Combined Chinese characters",
          example: "甲子"
        },
        {
          name: "elementalRelationship",
          type: "string",
          description: "Relationship between stem and branch elements",
          example: "Wood generates Water"
        },
        {
          name: "characteristics",
          type: "array",
          description: "Key characteristics of this combination",
          example: ["Leadership", "Innovation", "Growth"]
        },
        {
          name: "personalityTraits",
          type: "array",
          description: "Personality traits associated with this combination",
          example: ["Ambitious", "Creative", "Determined"]
        },
        {
          name: "careerAdvice",
          type: "array",
          description: "Career recommendations for this combination",
          example: ["Leadership roles", "Creative industries", "Management"]
        },
        {
          name: "luckyElements",
          type: "array",
          description: "Lucky elements for this combination",
          example: ["Water", "Metal"]
        },
        {
          name: "challenges",
          type: "array",
          description: "Potential challenges to overcome",
          example: ["Impatience", "Overconfidence"]
        }
      ]
    },
    data: generateSixtyJiazi()
  };
  
  return dataset;
};

// 生成并保存数据
const dataset = createDataset();
const outputPath = path.join(__dirname, '..', 'public', 'datasets', 'sixty-jiazi.json');

fs.writeFileSync(outputPath, JSON.stringify(dataset, null, 2), 'utf8');
console.log(`60甲子数据已生成并保存到: ${outputPath}`);
console.log(`总共生成了 ${dataset.data.length} 个甲子组合`);
